import discord
from discord.ext import commands
import database
import time

class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="balance")
    async def balance(self, ctx, member: discord.Member = None):
        """Affiche le solde d'un utilisateur."""
        member = member or ctx.author
        balance = database.get_balance(member.id)
        deposit = database.get_deposit(member.id)

        embed = discord.Embed(title=f"Solde de {member.display_name}", color=discord.Color.gold())
        embed.add_field(name="üí∞ Argent en poche", value=f"{balance} coins", inline=False)
        embed.add_field(name="üè¶ En banque", value=f"{deposit} coins", inline=False)
        embed.set_thumbnail(url=member.avatar.url if member.avatar else discord.Embed.Empty)
        await ctx.send(embed=embed)

    @commands.command()
    async def deposit(self, ctx, amount: int):
        """D√©pose de l'argent √† la banque."""
        if amount <= 0:
            await ctx.send("‚ùå Montant invalide.")
            return
        if database.deposit(ctx.author.id, amount):
            embed = discord.Embed(description=f"‚úÖ Tu as d√©pos√© {amount} pi√®ces √† la banque.", color=discord.Color.green())
            await ctx.send(embed=embed)
        else:
            await ctx.send("‚ùå Tu n'as pas assez d'argent dans ton portefeuille.")

    @commands.command()
    async def withdraw(self, ctx, amount: int):
        """Retire de l'argent de la banque."""
        if amount <= 0:
            await ctx.send("‚ùå Montant invalide.")
            return
        if database.withdraw(ctx.author.id, amount):
            embed = discord.Embed(description=f"‚úÖ Tu as retir√© {amount} pi√®ces de la banque.", color=discord.Color.green())
            await ctx.send(embed=embed)
        else:
            await ctx.send("‚ùå Tu n'as pas assez d'argent √† la banque.")

    @commands.command()
    async def pay(self, ctx, member: discord.Member, amount: int):
        """Paye un autre utilisateur."""
        if member == ctx.author:
            await ctx.send("‚ùå Tu ne peux pas te payer toi-m√™me.")
            return
        if amount <= 0:
            await ctx.send("‚ùå Montant invalide.")
            return
        if database.pay(ctx.author.id, member.id, amount):
            embed = discord.Embed(description=f"‚úÖ Tu as pay√© {amount} pi√®ces √† {member.display_name}.", color=discord.Color.green())
            await ctx.send(embed=embed)
        else:
            await ctx.send("‚ùå Tu n'as pas assez d'argent dans ton portefeuille.")

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setbalance(self, ctx, member: discord.Member, amount: int):
        """[ADMIN] Change le solde d'un utilisateur."""
        if amount < 0:
            await ctx.send("‚ùå Montant invalide.")
            return
        database.set_balance(member.id, amount)
        embed = discord.Embed(description=f"‚úÖ Le solde de {member.display_name} a √©t√© mis √† {amount} pi√®ces.", color=discord.Color.red())
        await ctx.send(embed=embed)

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setsalary(self, ctx, role: discord.Role, salary: int, cooldown: int = 3600):
        """[ADMIN] Attribue un salaire √† un r√¥le."""
        if salary <= 0:
            await ctx.send(embed=discord.Embed(
                title="‚ùå Erreur",
                description="Le salaire doit √™tre sup√©rieur √† z√©ro.",
                color=discord.Color.red()
            ))
            return

        database.assign_role_salary(role.id, salary, cooldown)
        await ctx.send(embed=discord.Embed(
            title="‚úÖ Salaire attribu√©",
            description=f"Le r√¥le **{role.name}** a maintenant un salaire de **{salary}** pi√®ces toutes les **{cooldown // 3600} heures**.",
            color=discord.Color.green()
        ))

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def removesalary(self, ctx, role: discord.Role):
        """[ADMIN] Supprime compl√®tement le salaire d'un r√¥le."""
        database.remove_role_salary(role.id)
        await ctx.send(embed=discord.Embed(
            title="‚úÖ Salaire supprim√©",
            description=f"Le r√¥le **{role.name}** a √©t√© compl√®tement supprim√© de la liste des salaires.",
            color=discord.Color.green()
        ))

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def editsalary(self, ctx, role: discord.Role, salary: int, cooldown: int):
        """[ADMIN] Modifie le salaire et le cooldown d'un r√¥le."""
        if salary < 0 or cooldown < 0:
            await ctx.send(embed=discord.Embed(
                title="‚ùå Erreur",
                description="Le salaire et le cooldown doivent √™tre sup√©rieurs ou √©gaux √† z√©ro.",
                color=discord.Color.red()
            ))
            return

        database.assign_role_salary(role.id, salary, cooldown)
        await ctx.send(embed=discord.Embed(
            title="‚úÖ Salaire modifi√©",
            description=f"Le r√¥le **{role.name}** a maintenant un salaire de **{salary}** pi√®ces toutes les **{cooldown // 3600} heures**.",
            color=discord.Color.green()
        ))

    @commands.command()
    async def collect(self, ctx):
        """Collecte ton salaire en fonction de tes r√¥les."""
        user_roles = [role.id for role in ctx.author.roles]
        total_salary = 0
        eligible_roles = []  # R√¥les √©ligibles (cooldown termin√©)
        non_eligible_roles = []  # R√¥les non √©ligibles (cooldown actif)

        # R√©cup√©rer le dernier moment de collecte
        conn = database.connect_db()
        cursor = conn.cursor()
        cursor.execute("SELECT last_collect FROM salary_cooldowns WHERE user_id = %s", (ctx.author.id,))
        last_collect_result = cursor.fetchone()
        last_collect = last_collect_result[0].timestamp() if last_collect_result else None

        # Parcourir chaque r√¥le pour calculer le salaire et le cooldown
        for role_id in user_roles:
            salary = database.get_role_salary(role_id)
            if salary > 0:  # Ignorer les r√¥les avec un salaire √† 0
                # R√©cup√©rer le cooldown du r√¥le
                cursor.execute("SELECT cooldown FROM role_salaries WHERE role_id = %s", (role_id,))
                cooldown_result = cursor.fetchone()
                cooldown = cooldown_result[0] if cooldown_result else 3600  # Cooldown par d√©faut de 1 heure

                # Calculer le temps restant pour ce r√¥le
                if last_collect:
                    remaining_time = (last_collect + cooldown) - time.time()
                    remaining_time = max(0, remaining_time)  # Ne pas afficher de temps n√©gatif
                else:
                    remaining_time = 0  # Pas de cooldown enregistr√©

                # Convertir le temps restant en heures, minutes et secondes
                hours = int(remaining_time // 3600)
                minutes = int((remaining_time % 3600) // 60)
                seconds = int(remaining_time % 60)

                # Ajouter les informations √† la liste appropri√©e
                role = ctx.guild.get_role(role_id)
                if role:
                    if remaining_time <= 0:
                        eligible_roles.append(f"**{role.name}** : {salary} pi√®ces")
                        total_salary += salary
                    else:
                        non_eligible_roles.append(
                            f"**{role.name}** : {salary} pi√®ces (cooldown : {hours}h {minutes}m {seconds}s)"
                        )

        conn.close()

        # Si aucun r√¥le n'est √©ligible
        if not eligible_roles:
            embed = discord.Embed(
                title="‚ùå Aucun salaire disponible",
                description="Tu ne peux pas collecter de salaire pour le moment.\n\n" +
                            ("**R√¥les avec cooldown actif :**\n" + "\n".join(non_eligible_roles) if non_eligible_roles else "Aucun r√¥le avec salaire attribu√©."),
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return

        # Mettre √† jour le solde de l'utilisateur
        database.update_balance(ctx.author.id, total_salary)

        # Enregistrer le cooldown pour les r√¥les collect√©s
        database.set_salary_cooldown(ctx.author.id)

        # Envoyer un message de confirmation
        embed = discord.Embed(
            title="üí∞ Salaire collect√©",
            description=f"Tu as collect√© **{total_salary}** pi√®ces.\n\n" +
                        "**R√¥les √©ligibles :**\n" + "\n".join(eligible_roles) + "\n\n" +
                        ("**R√¥les non √©ligibles :**\n" + "\n".join(non_eligible_roles) if non_eligible_roles else ""),
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def salaries(self, ctx):
        """[ADMIN] Affiche la liste de tous les r√¥les ayant un salaire dans le serveur."""
        roles_salaries = database.get_all_roles_salaries()
        if not roles_salaries:
            await ctx.send(embed=discord.Embed(
                title="üìú Salaires des r√¥les",
                description="Aucun r√¥le n'a de salaire attribu√©.",
                color=discord.Color.orange()
            ))
            return

        embed = discord.Embed(title="üìú Salaires des r√¥les", color=discord.Color.blue())
        for role_id, salary, cooldown in roles_salaries:
            role = ctx.guild.get_role(role_id)
            if role:
                embed.add_field(
                    name=f"R√¥le : {role.name}",
                    value=f"üí∞ Salaire : {salary} pi√®ces\n‚è≥ Cooldown : {cooldown // 3600} heures",
                    inline=False
                )

        await ctx.send(embed=embed)

async def setup(bot):
    await bot.add_cog(Economy(bot))
