import discord
from discord.ext import commands
import database
import asyncio

LOG_CHANNEL_ID = 123456789012345678  # Remplace par l'ID du canal o√π tu veux envoyer les logs

class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def send_log(self, message):
        channel = self.bot.get_channel(LOG_CHANNEL_ID)
        if channel:
            await channel.send(f"üìú {message}")

    @commands.command()
    async def solde(self, ctx):
        """Affiche le solde de l'utilisateur."""
        balance = database.get_balance(ctx.author.id)
        embed = discord.Embed(title="üí∞ Solde", description=f"{ctx.author.mention}, tu as **{balance}** pi√®ces.", color=discord.Color.green())
        await ctx.send(embed=embed)

    @commands.command()
    async def depot(self, ctx, montant: int):
        """D√©poser de l'argent dans la banque (√©pargne)."""
        if montant <= 0:
            await ctx.send("‚ùå Le montant doit √™tre positif.")
            return
        balance = database.get_balance(ctx.author.id)
        if montant > balance:
            await ctx.send("‚ùå Tu n'as pas assez de pi√®ces.")
            return
        database.update_balance(ctx.author.id, -montant)
        database.deposit(ctx.author.id, montant)
        await ctx.send(f"‚úÖ {ctx.author.mention}, tu as d√©pos√© **{montant}** pi√®ces dans ta banque.")
        await self.send_log(f"{ctx.author} a d√©pos√© {montant} pi√®ces.")

    @commands.command()
    async def retrait(self, ctx, montant: int):
        """Retirer de l'argent de la banque (√©pargne)."""
        if montant <= 0:
            await ctx.send("‚ùå Le montant doit √™tre positif.")
            return
        depot = database.get_deposit(ctx.author.id)
        if montant > depot:
            await ctx.send("‚ùå Tu n'as pas assez dans ta banque.")
            return
        database.deposit(ctx.author.id, -montant)
        database.update_balance(ctx.author.id, montant)
        await ctx.send(f"‚úÖ {ctx.author.mention}, tu as retir√© **{montant}** pi√®ces de ta banque.")
        await self.send_log(f"{ctx.author} a retir√© {montant} pi√®ces de sa banque.")

    @commands.command()
    async def collect_salary(self, ctx):
        """Collecter le salaire selon le r√¥le avec cooldown."""
        user_roles = ctx.author.roles
        salary = 0
        for role in user_roles:
            role_salary = database.get_role_salary(role.id)
            if role_salary:
                salary += role_salary

        if salary <= 0:
            await ctx.send("‚ùå Tu n'as aucun salaire √† collecter.")
            return

        # V√©rification cooldown
        cooldown = database.get_salary_cooldown(ctx.author.id)
        if cooldown > 0:
            await ctx.send(f"‚è≥ Tu dois encore attendre {cooldown} secondes avant de pouvoir collecter ton salaire.")
            return

        database.update_balance(ctx.author.id, salary)
        database.set_salary_cooldown(ctx.author.id)
        await ctx.send(f"üíº {ctx.author.mention}, tu as collect√© **{salary}** pi√®ces.")
        await self.send_log(f"{ctx.author} a collect√© son salaire de {salary} pi√®ces.")

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def assign_salary(self, ctx, role: discord.Role, salary: int, cooldown: int = 3600):
        """Attribuer un salaire √† un r√¥le avec un cooldown en secondes."""
        if salary < 0:
            await ctx.send("‚ùå Le salaire ne peut pas √™tre n√©gatif.")
            return
        database.assign_role_salary(role.id, salary, cooldown)
        await ctx.send(f"‚úÖ Le r√¥le **{role.name}** a maintenant un salaire de **{salary}** pi√®ces toutes les **{cooldown}** secondes.")
        await self.send_log(f"{ctx.author} a d√©fini un salaire de {salary} pi√®ces toutes les {cooldown} secondes pour le r√¥le {role.name}.")

    @commands.command()
    async def roles(self, ctx):
        """Afficher les r√¥les et leurs salaires."""
        roles_salaries = database.get_all_roles_salaries()
        if not roles_salaries:
            await ctx.send("‚ùå Aucun salaire attribu√© aux r√¥les.")
            return

        embed = discord.Embed(title="üíº Salaires des r√¥les", color=discord.Color.blue())
        for role_id, salary, cooldown in roles_salaries:
            role = discord.utils.get(ctx.guild.roles, id=role_id)
            if role:
                embed.add_field(name=role.name, value=f"Salaire : {salary} pi√®ces (cooldown : {cooldown}s)", inline=False)
        await ctx.send(embed=embed)

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setmoney(self, ctx, member: discord.Member, montant: int):
        """D√©finir directement le solde d'un utilisateur."""
        if montant < 0:
            await ctx.send("‚ùå Le montant ne peut pas √™tre n√©gatif.")
            return
        database.set_balance(member.id, montant)
        await ctx.send(f"‚úÖ Le solde de {member.mention} a √©t√© d√©fini √† **{montant}** pi√®ces.")
        await self.send_log(f"{ctx.author} a d√©fini le solde de {member} √† {montant} pi√®ces.")

async def setup(bot):
    await bot.add_cog(Economy(bot))
